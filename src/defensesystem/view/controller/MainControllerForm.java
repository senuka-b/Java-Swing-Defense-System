/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package defensesystem.view.controller;

import com.formdev.flatlaf.FlatDarkLaf;
import defensesystem.util.Event;
import defensesystem.util.Observable;
import defensesystem.util.Observer;
import defensesystem.view.defences.Defenses;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

/**
 *
 * @author senukab
 */
public class MainControllerForm extends javax.swing.JFrame {

    final private Observable observable;
    private int currentlySelected;
    /**
     * Creates new form MainControllerForm
     */
    public MainControllerForm() {
        
        observable = new Observable();
        currentlySelected = -1;
        
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        defenseListCombo = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        addNewDefense = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        currentDefenseList = new javax.swing.JTextPane();
        jLabel7 = new javax.swing.JLabel();
        positionSlider = new javax.swing.JSlider();
        jLabel8 = new javax.swing.JLabel();
        defendAreaButton = new javax.swing.JButton();
        attackButton = new javax.swing.JButton();
        returnToBaseButton = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        generalChatTextPane = new javax.swing.JTextPane();
        generalChatTextField = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        privateChatTextField = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        privateChatTextPane = new javax.swing.JTextPane();
        areaClearedCheckBox = new javax.swing.JCheckBox();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jLabel1.setBackground(new java.awt.Color(27, 153, 100));
        jLabel1.setFont(new java.awt.Font("Comfortaa Medium", 1, 48)); // NOI18N
        jLabel1.setText("Main Controller");
        jLabel1.setOpaque(true);

        jLabel2.setFont(new java.awt.Font("sansserif", 0, 24)); // NOI18N
        jLabel2.setText("Defenses");

        jLabel4.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(102, 255, 153));
        jLabel4.setText("+");

        defenseListCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select a Defense" }));
        defenseListCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defenseListComboActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("sansserif", 0, 24)); // NOI18N
        jLabel5.setText("Live Log");

        addNewDefense.setText("Deploy New Defense");
        addNewDefense.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewDefenseActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(102, 255, 153));
        jLabel6.setText("Selected Defense");

        currentDefenseList.setEditable(false);
        jScrollPane1.setViewportView(currentDefenseList);

        jLabel7.setFont(new java.awt.Font("sansserif", 0, 24)); // NOI18N
        jLabel7.setText("Control");

        positionSlider.setMajorTickSpacing(20);
        positionSlider.setOrientation(javax.swing.JSlider.VERTICAL);
        positionSlider.setPaintLabels(true);
        positionSlider.setPaintTicks(true);
        positionSlider.setSnapToTicks(true);
        positionSlider.setValue(0);
        positionSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                positionSliderStateChanged(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 153, 153));
        jLabel8.setText("Objective");

        defendAreaButton.setForeground(new java.awt.Color(255, 0, 255));
        defendAreaButton.setText("Defend Area");
        defendAreaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defendAreaButtonActionPerformed(evt);
            }
        });

        attackButton.setForeground(new java.awt.Color(0, 204, 204));
        attackButton.setText("Attack");
        attackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attackButtonActionPerformed(evt);
            }
        });

        returnToBaseButton.setForeground(new java.awt.Color(255, 204, 102));
        returnToBaseButton.setText("Return to Base");
        returnToBaseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnToBaseButtonActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 153, 153));
        jLabel9.setText("Position");

        jLabel10.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 153, 153));
        jLabel10.setText("General Channel");

        generalChatTextPane.setEditable(false);
        jScrollPane2.setViewportView(generalChatTextPane);

        generalChatTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        generalChatTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                generalChatTextFieldKeyReleased(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 153, 153));
        jLabel11.setText("Private Channel");

        privateChatTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        privateChatTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                privateChatTextFieldKeyReleased(evt);
            }
        });

        privateChatTextPane.setEditable(false);
        privateChatTextPane.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                privateChatTextPaneKeyReleased(evt);
            }
        });
        jScrollPane3.setViewportView(privateChatTextPane);

        areaClearedCheckBox.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        areaClearedCheckBox.setForeground(new java.awt.Color(255, 0, 0));
        areaClearedCheckBox.setText("Area Cleared");
        areaClearedCheckBox.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        areaClearedCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                areaClearedCheckBoxActionPerformed(evt);
            }
        });

        jTextPane1.setEditable(false);
        jTextPane1.setBackground(new java.awt.Color(11, 32, 54));
        jScrollPane4.setViewportView(jTextPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(positionSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addGap(76, 76, 76)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addComponent(jLabel8)
                                .addGap(163, 163, 163)
                                .addComponent(jLabel10))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(defendAreaButton, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(attackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(returnToBaseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(68, 68, 68)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane2)
                                    .addComponent(generalChatTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane3)
                                .addComponent(privateChatTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addGap(56, 56, 56))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 614, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 69, Short.MAX_VALUE)
                        .addComponent(areaClearedCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane4))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(addNewDefense, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(11, 11, 11))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(defenseListCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))))))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(24, 24, 24)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(706, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(areaClearedCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(24, 24, 24)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(defenseListCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addNewDefense)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane4)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel7)))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(generalChatTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(positionSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(returnToBaseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(defendAreaButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(55, 55, 55)
                        .addComponent(attackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(privateChatTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, 21, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel9)
                                .addComponent(jLabel8)))
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(95, 95, 95)
                    .addComponent(jLabel5)
                    .addContainerGap(463, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void updatePrivateChat(Event event, Observer observer) {
        
        try {
            Color color = Color.ORANGE;
            
            StyledDocument doc = privateChatTextPane.getStyledDocument();

            SimpleAttributeSet alignment = new SimpleAttributeSet();

            StyleConstants.setAlignment(alignment, StyleConstants.ALIGN_JUSTIFIED);

            StyleConstants.setForeground(alignment, event.getChatSender().equals("Main Control") ? Color.GREEN : color);

            doc.insertString(doc.getLength(),

                "[" + event.getChatType().name()  + "] " + (
                        event.getChatSender().equals("Main Control") ? "You -> " + observable.getObserver(currentlySelected).toString() : event.getChatSender()
                        ) + " - " + event.getChatText() + "\n",

                alignment);

            doc.setParagraphAttributes(doc.getLength(), 1, alignment, false);
            
            observer.update(event);
            
        } catch (BadLocationException ex) {
            Logger.getLogger(MainControllerForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void updateChat(Event event) {
        try {
            
            if (event.getChatType().equals(Event.ChatTypeEnum.GENERAL)) {
                observable.notifyObservers(event);
            } 
 
//            int red = (int)(Math.random()*256);
//            int green = (int)(Math.random()*256);
//            int blue = (int)(Math.random()*256);
//            
//            Color color = new Color(red, green, blue);
//            
            Color color = Color.PINK;

            StyledDocument doc = generalChatTextPane.getStyledDocument();

            SimpleAttributeSet alignment = new SimpleAttributeSet();
//            StyleConstants.setAlignment(alignment, event.getChatSender().equals("Main Control") 
//                    ? StyleConstants.ALIGN_RIGHT : StyleConstants.ALIGN_LEFT
//            );
            
            StyleConstants.setAlignment(alignment, StyleConstants.ALIGN_JUSTIFIED);
            
            StyleConstants.setForeground(alignment, event.getChatSender().equals("Main Control") ? Color.GREEN : color);

            doc.insertString(doc.getLength(),

               "[" + event.getChatType().name()  + "] " + (
                        event.getChatSender().equals("Main Control") ? "You"  : event.getChatSender()
                       ) + " - " + event.getChatText() + "\n",

            alignment);
            
            doc.setParagraphAttributes(doc.getLength(), 1, alignment, false);
            

           
        } catch (BadLocationException ex) {
            Logger.getLogger(MainControllerForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void updateDefenseComboBox() {
        defenseListCombo.removeAllItems();
        
        Observer[] observerArray = observable.toArray();
        
        for (Observer observerArray1 : observerArray) {
            defenseListCombo.addItem(observerArray1.toString());
        }
        
        defenseListCombo.setSelectedIndex(observerArray.length-1);
        
    }
    
    public void updateMainController(Observer currentObserver, String status) {
        if (status.equals("add") || status.equals("remove")) {
            
            if (status.equals("remove")) observable.removeObserver(currentObserver);
            
            updateDefenseComboBox();
            updateCurrentDefenceList(currentObserver, status);

        }
        
        updateMainLog(currentObserver, status);
    }
    
    public void updateMainController(Observer currentObserver, int position) {
        updateMainController(currentObserver, "position");
        if (currentlySelected == observable.getObserverIndex(currentObserver)) {
              positionSlider.setValue(position);
        }
        
    }
    
    private void updateMainLog(Observer currentObserver, String status) {
    
    }
    
    private void updateCurrentDefenceList(Observer currentObserver, String status) {
    
    }
    
    private void addNewDefense(String selectedDefense) {
        if (selectedDefense != null) {
            for (Defenses defense : Defenses.values()) {
                if (defense.getDisplayName().equals(selectedDefense)) {
                    Observer defenseFrame = defense.createInstance(defense.name() + " #" + observable.getNextIndex(), this);
                    
                    observable.addObserver(defenseFrame);

                    updateMainController(defenseFrame, "add");
                    return;
                }
            }
        }
        
    }
    
    private void defendAreaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defendAreaButtonActionPerformed
        if (currentlySelected != -1) {
            observable.notify(currentlySelected, new Event("DEFEND AREA!"));
        }
    }//GEN-LAST:event_defendAreaButtonActionPerformed

    private void returnToBaseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnToBaseButtonActionPerformed
        if (currentlySelected != -1) {
            observable.notify(currentlySelected, new Event("FALLBACK!"));
        }
    }//GEN-LAST:event_returnToBaseButtonActionPerformed

    private void areaClearedCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_areaClearedCheckBoxActionPerformed
        observable.notifyObservers(new Event(areaClearedCheckBox.isSelected()));
    }//GEN-LAST:event_areaClearedCheckBoxActionPerformed

    private void addNewDefenseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewDefenseActionPerformed
        String[] defenseNames = Defenses.getAllDefenseDisplayNames();
        
        String selectedDefense = (String) JOptionPane.showInputDialog(
            this,
            "Select a Defense:",
            "Defense Selection",
            JOptionPane.PLAIN_MESSAGE,
            null,
            defenseNames,
            defenseNames[0] 
        );

        addNewDefense(selectedDefense);
    }//GEN-LAST:event_addNewDefenseActionPerformed

    private void defenseListComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defenseListComboActionPerformed

        this.currentlySelected = defenseListCombo.getSelectedIndex();
    }//GEN-LAST:event_defenseListComboActionPerformed

    private void positionSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_positionSliderStateChanged
        if (currentlySelected != -1) {
            observable.notify(currentlySelected, new Event(positionSlider.getValue()));
        }
    }//GEN-LAST:event_positionSliderStateChanged

    private void generalChatTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_generalChatTextFieldKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
           String text = generalChatTextField.getText().strip();
           if (!text.equals("")) {
               
               Event event = new Event(text, Event.ChatTypeEnum.GENERAL, "Main Control");
               
               updateChat(event);
               
               generalChatTextField.setText(" ");
               
           }
        }
    }//GEN-LAST:event_generalChatTextFieldKeyReleased

    private void attackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attackButtonActionPerformed
        
        if (currentlySelected != -1) {
            observable.notify(currentlySelected, new Event("ATTACK!"));
        }
        
    }//GEN-LAST:event_attackButtonActionPerformed

    private void privateChatTextPaneKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_privateChatTextPaneKeyReleased
      
    }//GEN-LAST:event_privateChatTextPaneKeyReleased

    private void privateChatTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_privateChatTextFieldKeyReleased
          if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
           String text = privateChatTextField.getText().strip();
           if (!text.equals("")) {
               
               Event event = new Event(text, Event.ChatTypeEnum.PRIVATE, "Main Control");
               
               updatePrivateChat(event, observable.getObserver(currentlySelected));
               
               privateChatTextField.setText(" ");
               
           }
        }
    }//GEN-LAST:event_privateChatTextFieldKeyReleased

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the FlatDark look and feel */
       

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
                
                new MainControllerForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addNewDefense;
    private javax.swing.JCheckBox areaClearedCheckBox;
    private javax.swing.JButton attackButton;
    private javax.swing.JTextPane currentDefenseList;
    private javax.swing.JButton defendAreaButton;
    private javax.swing.JComboBox<String> defenseListCombo;
    private javax.swing.JTextField generalChatTextField;
    private javax.swing.JTextPane generalChatTextPane;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JSlider positionSlider;
    private javax.swing.JTextField privateChatTextField;
    private javax.swing.JTextPane privateChatTextPane;
    private javax.swing.JButton returnToBaseButton;
    // End of variables declaration//GEN-END:variables
}
